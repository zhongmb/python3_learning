'''
    基础数据类型
'''
#!/usr/bin/python3
# -*- coding: utf-8 -*-
import sys

def info():
    '''
    Python3 基本数据类型
        Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。
        在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。
        等号（=）用来给变量赋值。
        等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。
    多个变量赋值
        Python允许你同时为多个变量赋值。例如：
            a = b = c = 1
            以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。
        您也可以为多个对象指定多个变量。例如：
            a, b, c = 1, 2, "runoob"
            以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 "runoob" 分配给变量 c。
    标准数据类型，Python3 中有六个标准的数据类型：
        Number（数字）
        String（字符串）
        List（列表）
        Tuple（元组）
        Sets（集合）
        Dictionary（字典）
    Number（数字）
        Python3 支持 int、float、bool、complex（复数）。
        在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。
        内置的 type() 函数可以用来查询变量所指的对象类型。
        isinstance 和 type 的区别在于：type()不会认为子类是一种父类类型。isinstance()会认为子类是一种父类类型。
        注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。
            到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。
        您也可以使用del语句删除一些对象引用。
            del语句的语法是：
                del var1[,var2[,var3[....,varN]]]]
    数值运算
        1、Python可以同时为多个变量赋值，如a, b = 1, 2。
        2、一个变量可以通过赋值指向不同类型的对象。
        3、数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。
        4、在混合计算时，Python会把整型转换成为浮点数。
    String（字符串）
        Python中的字符串用单引号(')或双引号(")括起来，同时使用反斜杠(\\)转义特殊字符。
        字符串的截取的语法格式如下：变量[头下标:尾下标]
        索引值以 0 为开始值，-1 为从末尾的开始位置。
        加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数。

        Python 使用反斜杠(\\)转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串
        另外，反斜杠(\\)可以作为续行符，表示下一行是上一行的延续。也可以使用 \"\"\"...\"\"\" 或者 \'\'\'...\'\'\' 跨越多行。

        注意：
            1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
            2、字符串可以用+运算符连接在一起，用*运算符重复。
            3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
            4、Python中的字符串不能改变。
    List列表：
        列表是写在方括号([])之间、用逗号分隔开的元素列表。
        和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
        列表截取的语法格式如下：变量[头下标:尾下标]
        索引值以 0 为开始值，-1 为从末尾的开始位置。
        加号（+）是列表连接运算符，星号（*）是重复操作。
        List内置了有很多方法，例如append()、pop()等等，这在后面会讲到。
        注意：
            1、List写在方括号之间，元素用逗号隔开。
            2、和字符串一样，list可以被索引和切片。
            3、List可以使用+操作符进行拼接。
            4、List中的元素是可以改变的。
    Tuple（元组）
        元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号(())里，元素之间用逗号隔开。
        元组中的元素类型也可以不相同
        元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。
        其实，可以把字符串看作一种特殊的元组。
        tup1 = ()    # 空元组
        tup2 = (20,) # 一个元素，需要在元素后添加逗号
        string、list和tuple都属于sequence（序列）。
        注意：
            1、与字符串一样，元组的元素不能修改。
            2、元组也可以被索引和切片，方法一样。
            3、注意构造包含0或1个元素的元组的特殊语法规则。
            4、元组也可以使用+操作符进行拼接。
    Set（集合）
        集合（set）是一个无序不重复元素的序列。
        基本功能是进行成员关系测试和删除重复元素。
        可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
    Dictionary（字典）
        字典（dictionary）是Python中另一个非常有用的内置数据类型。
        列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
        字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。
        键(key)必须使用不可变类型。
        在同一个字典中，键(key)必须是唯一的。
        注意：
            1、字典是一种映射类型，它的元素是键值对。
            2、字典的关键字必须为不可变类型，且不能重复。
            3、创建空字典使用 { }。
    Python数据类型转换
        有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。
        以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。
        函数	描述
        int(x [,base]) 将x转换为一个整数
        float(x)       将x转换到一个浮点数
        complex(real [,imag])        创建一个复数
        str(x)         将对象 x 转换为字符串
        repr(x)        将对象 x 转换为表达式字符串
        eval(str)      用来计算在字符串中的有效Python表达式,并返回一个对象
        tuple(s)       将序列 s 转换为一个元组
        list(s)        将序列 s 转换为一个列表
        set(s)         转换为可变集合
        dict(d)        创建一个字典。d 必须是一个序列 (key,value)元组。
        frozenset(s)   转换为不可变集合
        chr(x)         将一个整数转换为一个字符
        unichr(x)      将一个整数转换为Unicode字符
        ord(x)         将一个字符转换为它的整数值
        hex(x)         将一个整数转换为一个十六进制字符串
        oct(x)         将一个整数转换为一个八进制字符串
    元组（小拓展）
        一般来说，函数的返回值一般为一个。
        而函数返回多个值的时候，是以元组的方式返回的。
        python中的函数还可以接收可变长参数，比如以 "*" 开头的的参数名，会将所有的参数收集到一个元组上。
    字典（小拓展）
        python中的字典是使用了一个称为散列表（hashtable）的算法（不具体展开），
        其特点就是：不管字典中有多少项，in操作符花费的时间都差不多。
        如果把一个字典对象作为for的迭代对象，那么这个操作将会遍历字典的键：
    '''
    print(info.__doc__)

def set_used():
    '''
    集合使用
    '''
    student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'}

    print(student)   # 输出集合，重复的元素被自动去掉
    # 成员测试
    if 'Rose' in student:
        print('Rose 在集合中')
    else:
        print('Rose 不在集合中')

    # set可以进行集合运算
    set_a = set('abracadabra')
    set_b = set('alacazam')

    print(set_a)
    print(set_a - set_b)     # a和b的差集
    print(set_a | set_b)     # a和b的并集
    print(set_a & set_b)     # a和b的交集
    print(set_a ^ set_b)     # a和b中不同时存在的元素

def number_used():
    '''
    数字使用
    '''
    counter = 100 # 整型变量
    miles = 1000.0 # 浮点型变量
    name = "runoob" # 字符串
    print(counter)
    print(miles)
    print(name)

def string_used():
    '''
    字符串使用
    '''
    teststr = 'Runoob'
    print(teststr)          # 输出字符串
    print(teststr[0:-1])    # 输出第一个到倒数第二个的所有字符
    print(teststr[0])       # 输出字符串第一个字符
    print(teststr[2:5])     # 输出从第三个开始到第五个的字符
    print(teststr[2:])      # 输出从第三个开始的后的所有字符
    print(teststr * 2)      # 输出字符串两次
    print(teststr + "TEST") # 连接字符串

def convert_func():
    '''类型转换函数'''
    print(repr(convert_func))
    # eval("print(1+2)") #会告警

def test():
    '''
    测试函数
    '''
    number_used()
    string_used()
    set_used()
    convert_func()


def main(argv):
    '''主函数'''
    print("运行参数", argv)
    info()
    test()



if __name__ == "__main__":
    main(sys.argv)
